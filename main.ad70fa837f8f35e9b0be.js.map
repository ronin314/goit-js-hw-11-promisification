{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","resolve","reject","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","success","id","error","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAASF,KACRA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,G,kCCdXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/D,OAAO,IAAIhB,SAAQ,SAACiB,EAASC,GAC3BD,EAAQH,OAINX,EAAS,SAAAW,GAAY,OAAIT,QAAQc,MAAML,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpBnC,IAIMiB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAK9CK,EAAaH,KAAKE,SAAW,GAEnC,OAAO,IAAI1B,SAAQ,SAACiB,EAASC,GAC3BhB,YAAW,WACT,GAAIyB,EAAY,CACd,IAAMC,EAAU,CAAEC,GAAIR,EAAYQ,GAAIzB,KAAMN,GAC5CmB,EAAQW,GAGV,IAAME,EAAQT,EAAYQ,GAC1BX,EAAOY,KACNhC,OAIDiC,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIzB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGI4B,EAAW,SAAAH,GACfxB,QAAQ4B,KAAR,gCAA6CJ,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO3B,KAAKwB,GAAYI,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO3B,KAAKwB,GAAYI,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAAM3B,KAAKwB,GAAYI,MAAMH,GAE/DZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO3B,KAAKwB,GAAYI,MAAMH,K","file":"main.ad70fa837f8f35e9b0be.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(resolved => {\r\n    setTimeout(() => {\r\n      resolved(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(1000).then(logger);\r\ndelay(2000).then(logger);\r\ndelay(3000).then(logger);\r\ndelay(4000).then(logger);\r\ndelay(5000).then(logger);\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        const success = { id: transaction.id, time: delay };\r\n        resolve(success);\r\n      }\r\n\r\n      const error = transaction.id;\r\n      reject(error);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}